#!/usr/bin/env python3
import sys
import requests
from pprint import pprint
from mm2lib import *

supported_methods = ['activate',
                     'my_balance',
                     'my_orders',
                     'my_tx_history',
                     'my_swap_status',
                     'my_recent_swaps',
                     'orderbook',
                     'order_status',
                     'cancel_all',
                     'cancel_pair',
                     'cancel_order',
                     'withdraw',
                     'setprice',
                     'buy',
                     'sell',
                     'stop',
                     'start'
                    ]

node_ip = "http://127.0.0.1:7783"
try:
    method = sys.argv[1]
except:
    print("No method parameter! Use one from the list below.")
    print(supported_methods)
    sys.exit(0)

if method in supported_methods:
    if method == 'activate':
        cointag = get_cointag(method)
        resp = activate(node_ip, userpass, cointag)
        pprint(resp.json())
    elif method == 'my_balance':
        cointag = get_cointag(method)
        resp = my_balance(node_ip, userpass, cointag)
        pprint(resp.json())    
    elif method == 'orderbook':
        baserel = get_baserel(method)
        resp = orderbook(node_ip, userpass, baserel[0], baserel[1])
        pprint(resp.json())
    elif method == 'order_status':
        uuid = get_uuid(method)
        resp = order_status(node_ip, userpass, uuid)
        pprint(resp.json())
    elif method == 'my_orders':
        resp = my_orders(node_ip, userpass)
        pprint(resp.json())
    elif method == 'cancel_order':
        uuid = get_uuid(method)
        resp = cancel_order(node_ip, userpass, uuid)
        pprint(resp.json())
    elif method == 'cancel_all':
        resp = cancel_all(node_ip, userpass)
        pprint(resp.json())
    elif method == 'cancel_pair':
        baserel = get_baserel(method)
        resp = cancel_pair(node_ip, userpass, baserel[0], baserel[1])
        pprint(resp.json())
    elif method == 'setprice':
        tradeparams = get_tradeparams(method)
        resp = setprice(node_ip, userpass, tradeparams[0], tradeparams[1], tradeparams[2], tradeparams[3])
        pprint(resp.json())
    elif method == 'buy':
        tradeparams = get_tradeparams(method)
        resp = buy(node_ip, userpass, tradeparams[0], tradeparams[1], tradeparams[2], tradeparams[3])
        pprint(resp.json())
    elif method == 'sell':
        tradeparams = get_tradeparams(method)
        resp = sell(node_ip, userpass, tradeparams[0], tradeparams[1], tradeparams[2], tradeparams[3])
        pprint(resp.json())
    elif method == 'withdraw':
        sendparams = get_sendparams(method)
        resp = withdraw(node_ip, userpass, sendparams[0], sendparams[1], sendparams[2]).json()
        if 'tx_hash' in resp:
            rawhex = resp['tx_hex']
            resp = send_raw_transaction(node_ip, userpass, sendparams[0], rawhex)
            pprint(resp.json())
        else:
            print("ERROR:")
            pprint(resp.json())
    elif method == 'my_tx_history':
        cointag = get_cointag(method)
        resp = my_tx_history(node_ip, userpass, cointag)
        pprint(resp.json())
    elif method == 'my_swap_status':
        uuid = get_uuid(method)
        resp = my_swap_status(node_ip, userpass, uuid)
        pprint(resp.json())
    elif method == 'my_recent_swaps':
        resp = my_recent_swaps(node_ip, userpass)
        pprint(resp.json())
    elif method == 'stop':
        resp = stop_mm2(node_ip, userpass)
        pprint(resp.json())
    elif method == 'start':
        cwd = os.getcwd()
        mm2_logfile = cwd+'/mm2_output.log'
        try:
          stop_mm2(local_ip, userpass) # in case mm2 already running
          time.sleep(3)
        except:
          pass
        start_mm2(mm2_logfile)
else:
    print("Method not recognised! Is it listed below?")
    print(supported_methods)
